#!/sbin/sh
#BusyBox Installer
#by YashdSaraf@XDA

OPFD=$2
BBZIP=$3

ui_print() {
    echo -e "ui_print $1\n
    ui_print" >> /proc/self/fd/$OPFD
	echo -e "$1" >> $LOGFILE
}

error() {
	local ERRSTAT=$?
	if [ $ERRSTAT -ne 0 ]
		then
		ui_print "  "
		ui_print " ***Abort!!*** "
		ui_print "Cause: $1"
		ui_print "Quitting installer -- Check $LOGFILE for errors"
		[ "$_mounted" == "no" ] && umount /system
		exit "$ERRSTAT"
	else sleep 0.5
	fi
}

is_mounted() {
	grep "$1" /proc/mounts > /dev/null 2>&1
	return $?
}

mount_ () {
	/sbin/mount $* || /sbin/busybox mount $* || /system/bin/toolbox mount $* ||
	/system/bin/toybox mount $* || /system/bin/busybox mount $* ||
	/system/xbin/busybox mount $* || return 1
}

#embedded mode support
readlink /proc/$$/fd/$OPFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]
	then
	OPFD=0
	for FD in `ls /proc/$$/fd`
	do
		readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
		if [ "$?" -eq "0" ]
			then
			ps | grep " 3 $FD " | grep -v grep >/dev/null
		  	if [ "$?" -eq "0" ]
		  		then
				OPFD=$FD
				break
			fi
		fi
	done
fi

( mount_ /data 
mount_ /cache ) 2>/dev/null

#Redirect all errors to LOGFILE
SDCARD=$(
	ls -d /sdcard || ls -d /data || ls -d /cache
) 2>/dev/null
if [ -z $SDCARD ]
	then false
	error "Error: No accessible partition detected"
fi
LOGFILE=$SDCARD/BusyBox-YDS-installer.log
echo "#`date`
#Ignore umount errors!" > $LOGFILE
exec 2>>$LOGFILE

ARCH=arm
ARCH64=arm64

ui_print "================================================"
ui_print "   BusyBox 1.26.1 $ARCH (Stable: 07 Jan/17)   "
ui_print "         -----by YashdSaraf@XDA-----            "
ui_print "================================================"
ui_print "  "
sleep 1

ui_print "Mounting /system --"

if (is_mounted /system)
	then
	mount_ -t auto -o rw,remount /system
	error "Error while mounting /system"
	_mounted="yes"
else
	mount_ -t auto -o rw /system
	error "Error while mounting /system"
	_mounted="no"
fi

ui_print "Checking Architecture --"

FOUNDARCH="$(grep -Eo "ro.product.cpu.abi(2)?=.+" /system/build.prop /default.prop 2>/dev/null | grep -Eo "[^=]*$" | head -n1)"

ui_print "Looking for => '$ARCH', Found => '$FOUNDARCH'"


if [ "${FOUNDARCH::${#ARCH64}}" == "$ARCH64" ]
	then
	BBFILE=busybox64
	ui_print "64 bit architecture detected --"
elif [ "${FOUNDARCH::${#ARCH}}" == "$ARCH" ]
	then
	BBFILE=busybox
	ui_print "32 bit architecture detected --"
else
	false
	error "Wrong architecture found"
fi

ui_print "Checking if busybox needs to have SELinux support --"

API=`grep -E "ro.build.version.sdk=.+" /system/build.prop /default.prop 2>/dev/null | grep -Eo "[^=]*$" | head -n1`

SELSTAT="DISABLED"
[ $API -ge 18 ] && [ -e /sys/fs/selinux/enforce ] && SELSTAT="ENABLED"

for i in /sdcard /data /cache
do
	if [ -f $i/bbxselinuxenabled ]
		then
		SELSTAT="ENABLED (user override)"
		break
	elif [ -f $i/bbxselinuxdisabled ]
		then
		SELSTAT="DISABLED (user override)"
		break
	fi
done
unset i

BBSEL=
if echo "$SELSTAT" | grep ENABLED > /dev/null 2>&1
	then
	BBSEL=-sel
fi

ui_print "  "
ui_print "SELinux support is $SELSTAT --"

SUIMG=$(
	ls /data/su.img || ls /cache/su.img ||
	ls /data/magisk.img || ls /cache/magisk.img
) 2>/dev/null

if [ ! -z "$SUIMG" ]
	then
	if [ "`basename $SUIMG`" == "magisk.img" ]
		then MNTPATH="/magisk"
	else MNTPATH="/su"
	fi
	ui_print "Systemless root detected --"
	#Following code to mount su.img is borrowed from supersu update-binary
	[ ! -d $MNTPATH ] && {
		mkdir $MNTPATH 2>/dev/null
		chmod 755 $MNTPATH
	}
	LOOPDEVICE=
	for LOOP in 0 1 2 3 4 5 6 7
	do
		if (! is_mounted $MNTPATH)
			then LOOPDEVICE=/dev/block/loop$LOOP
			if [ ! -f "$LOOPDEVICE" ]
				then mknod $LOOPDEVICE b 7 $LOOP
			fi
			losetup $LOOPDEVICE $SUIMG
			if [ "$?" -eq "0" ]
				then
				mount_ -t ext4 -o loop $LOOPDEVICE $MNTPATH
			fi
			if (is_mounted $MNTPATH)
				then break
			fi
		fi
	done
fi

INSTALLDIR="none"
if [ ! -z $MNTPATH ] && (is_mounted $MNTPATH)
	then
	if [ $MNTPATH == "/su" ]
		then INSTALLDIR="/su/xbin"
	else
		INSTALLDIR="/magisk/phh/bin"
		if [ ! -d $INSTALLDIR ]
			then INSTALLDIR="/system/xbin"
		fi
	fi
else INSTALLDIR="/system/xbin"
fi

if [ ! -d $INSTALLDIR ]
	then
	mkdir $INSTALLDIR
	error "Installation directory $INSTALLDIR is not accessible"
fi

ui_print "Cleaning up older busybox versions (if any) --"
TOTALSYMLINKS=0
for i in $(ls -d /system /su /magisk/phh 2>/dev/null)
do
	for j in xbin bin
	do
		if [ -e $i/$j/busybox ]
			then
			ui_print "Found in $i/$j --"
			cd $i/$j
			count=0
			for k in $(ls | grep -v busybox)
			do
				if [ "$k" -ef "busybox" ] || ([ -x $k ] && [ "`head -n 1 $k`" == "#!$i/$j/busybox" ])
					then
					rm -f $k
					count=$((count+1))
				fi
			done
			rm -f busybox
			cd /
			error "Error while cleaning BusyBox in $i"
			TOTALSYMLINKS=$((TOTALSYMLINKS+count))
		fi
	done
done
unset i

if [ $TOTALSYMLINKS -gt 0 ]
	then ui_print "Total applets removed => $TOTALSYMLINKS --"
	ui_print "  "
fi

BBFILE="${BBFILE}${BBSEL}.xz"

ui_print "Extracting Binary to $INSTALLDIR --"
cd $INSTALLDIR
unzip -o "$BBZIP" $BBFILE ssl_helper xzdec
error "Error while unzipping $BBZIP to $INSTALLDIR"
chmod 0555 xzdec
./xzdec $BBFILE > busybox
chmod 0555 busybox
chmod 0555 ssl_helper
rm $BBFILE
rm xzdec

ui_print "Setting up applets --"
for i in $(./busybox --list)
do
	./busybox ln -s busybox $i 2>/dev/null
	if [ ! -e $i ]
		then
		#Make wrapper scripts for applets if symlinking fails
		echo "#!$INSTALLDIR/busybox" > $i
		error "Error while setting up applets"
		chmod 0755 $i
	fi
done
unset i

ui_print "Adding common system users and groups --"
if ls /system/etc >/dev/null 2>&1
	then etc="/system/etc"
elif ls /etc >/dev/null 2>&1
	then etc="/etc"
else
	ui_print "ETC directory is **NOT** accessible--"
fi

if [ ! -z $etc ]
	then
	unzip -o "$BBZIP" addusergroup.sh
	. ./addusergroup.sh
	rm addusergroup.sh

	_resolv=$etc/resolv.conf
	if [ ! -f $_resolv ] || ! grep nameserver $_resolv >/dev/null 2>&1
		then
		echo "# Adding google nameservers for busybox lookup utils" >> $_resolv
		echo "nameserver 8.8.8.8" >> $_resolv
		echo "nameserver 8.8.4.4" >> $_resolv
	fi
fi

cd /

ui_print "Unmounting /system --"
ui_print "  "
if [ ! -z $MNTPATH ]
	then
	umount $MNTPATH
	losetup -d $LOOPDEVICE
	rmdir $MNTPATH #not using rm -r so $MNTPATH is deleted only if empty
fi 2>/dev/null
umount /system
ui_print "All DONE! -- Check $LOGFILE for more info"
sleep 0.5
